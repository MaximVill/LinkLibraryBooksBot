import telebot
from telebot import types
import sqlite3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7570954937:AAEyuXmEkY_GM3rm6gT_luGpXhNe4eEZ2Hg'
bot = telebot.TeleBot(API_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('library.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥
cursor.execute('''
CREATE TABLE IF NOT EXISTS books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author TEXT,
    source_link TEXT,
    summary TEXT,
    tags TEXT,
    date_added DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
current_user_data = {}
user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É"))

    btn2 = types.KeyboardButton("üìö –°–ø–∏—Å–æ–∫")
    btn3 = types.KeyboardButton("üîé –ü–æ–∏—Å–∫")
    markup.row(btn2, btn3)

    markup.add(types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É"))

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞. –î–æ–±–∞–≤—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É.", reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏*:

üìå **–ö–æ–º–∞–Ω–¥—ã:**
- /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
- /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏)
- /stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
- /help ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ

üìå **–ö–Ω–æ–ø–∫–∏:**
- "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É" ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
- "–°–ø–∏—Å–æ–∫" ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (—Å ID, –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –∞–≤—Ç–æ—Ä–æ–º, —Ç–µ–≥–∞–º–∏)
- "–ü–æ–∏—Å–∫" ‚Äî –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥—É
- "–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É" ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ –µ—ë ID

üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?**
–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:  
`—Ä–∞–∑–≤–∏—Ç–∏–µ, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç`

üîç **–ü–æ–∏—Å–∫**  
–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∫–∞–∫ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è, —Ç–∞–∫ –∏ –ø–æ –ª—é–±–æ–º—É –∏–∑ —Ç–µ–≥–æ–≤. –ü–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É.

üö´ **–í–∞–∂–Ω–æ:**  
–ï—Å–ª–∏ –≤—ã –Ω–∞—á–∞–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å –∫–Ω–∏–≥—É, —Ç–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ.

üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.
"""
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')


# –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
@bot.message_handler(commands=['cancel'])
def cancel_action(message):
    chat_id = message.chat.id
    if user_states.get(chat_id) == "adding_book":
        user_states[chat_id] = None
        bot.send_message(chat_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif user_states.get(chat_id) == "deleting_book":
        user_states[chat_id] = None
        bot.send_message(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        bot.send_message(chat_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è
@bot.message_handler(commands=['stats'])
def show_stats(message):
    cursor.execute("SELECT COUNT(*) FROM books")
    total_books = cursor.fetchone()[0]

    cursor.execute("SELECT tags FROM books")
    tags = cursor.fetchall()
    tag_counts = {}
    for tag_list in tags:
        for tag in tag_list[0].split(','):
            tag = tag.strip()
            if tag:
                tag_counts[tag] = tag_counts.get(tag, 0) + 1

    stats = f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {total_books}\n\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:\n"
    for tag, count in tag_counts.items():
        stats += f"- {tag}: {count}\n"

    bot.send_message(message.chat.id, stats)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    chat_id = message.chat.id
    current_state = user_states.get(chat_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥—Ä—É–≥–æ–µ
    if current_state == "adding_book":
        if message.text in ["üìö –°–ø–∏—Å–æ–∫", "üîé –ü–æ–∏—Å–∫", "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É"]:
            bot.send_message(chat_id, """
‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è!*  
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:  
‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ  
‚û°Ô∏è –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel  
‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å: [/help](/help)
""", parse_mode='Markdown')
            return
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–¥–Ω–∞ –∏–∑ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass
    elif current_state == "deleting_book":
        if message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", "üìö –°–ø–∏—Å–æ–∫", "üîé –ü–æ–∏—Å–∫"]:
            bot.send_message(chat_id, """
‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è!*  
–í—ã —Å–µ–π—á–∞—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏.  
–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.
""")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–∏—Ö –∫–Ω–æ–ø–æ–∫
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É":
        user_states[chat_id] = "adding_book"
        add_book_start(message)
    elif message.text == "üìö –°–ø–∏—Å–æ–∫":
        list_books(message)
    elif message.text == "üîé –ü–æ–∏—Å–∫":
        search_books_start(message)
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É":
        delete_book_start(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")


# –ö–æ–º–∞–Ω–¥–∞ /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
@bot.message_handler(commands=['add'])
def add_book_start(message):
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_title_step)


def process_title_step(message):
    text = message.text.strip()
    if text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", "üìö –°–ø–∏—Å–æ–∫", "üîé –ü–æ–∏—Å–∫", "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É"]:
        bot.send_message(message.chat.id, """
‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è!*  
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:  
‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ  
‚û°Ô∏è –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel  
\n‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å: [/help](/help)
""", parse_mode='Markdown')
        return

    current_user_data['title'] = text
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_author_step)
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass


def process_author_step(message):
    current_user_data['author'] = message.text.strip()
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é):")
    bot.register_next_step_handler(message, process_source_step)
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass


def process_source_step(message):
    current_user_data['source_link'] = message.text.strip()
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_summary_step)
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass


def process_summary_step(message):
    current_user_data['summary'] = message.text.strip().lower()
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    bot.register_next_step_handler(message, process_tags_step)
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass


def process_tags_step(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tags_input = message.text.strip().lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    tags_list = [tag.strip() for tag in tags_input.split(',')]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    current_user_data['tags'] = ', '.join(tags_list)

    cursor.execute('''
    INSERT INTO books (title, author, source_link, summary, tags)
    VALUES (?, ?, ?, ?, ?)
    ''', (
        current_user_data['title'],
        current_user_data['author'],
        current_user_data['source_link'],
        current_user_data['summary'],
        current_user_data['tags']
    ))
    conn.commit()

    bot.send_message(message.chat.id, "–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    user_states[message.chat.id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass


# –ö–æ–º–∞–Ω–¥–∞ /list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥
@bot.message_handler(commands=['list'])
def list_books(message):
    cursor.execute("SELECT id, title, author, source_link, tags FROM books")
    books = cursor.fetchall()
    if not books:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç.")
    else:
        response = "*–í–∞—à–∏ –∫–Ω–∏–≥–∏:*\n\n"
        for book in books:
            book_id, title, author, link, tags = book
            tag_list = ", ".join([f"`{tag.strip()}`" for tag in tags.split(',')]) if tags else ""
            response += f"ID: {book_id} | {title} ({author})\n–°—Å—ã–ª–∫–∞: _{link}_\n–¢–µ–≥–∏: {tag_list}\n\n"
        bot.send_message(message.chat.id, response, parse_mode="Markdown")


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
def delete_book_start(message):
    chat_id = message.chat.id
    user_states[chat_id] = "deleting_book"
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, delete_book)


def delete_book(message):
    chat_id = message.chat.id
    try:
        book_id = int(message.text.strip())
        cursor.execute("SELECT id FROM books WHERE id = ?", (book_id,))
        if cursor.fetchone():
            cursor.execute("DELETE FROM books WHERE id = ?", (book_id,))
            conn.commit()
            bot.send_message(chat_id, f"–ö–Ω–∏–≥–∞ —Å ID {book_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.send_message(chat_id, "–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")
    finally:
        user_states[chat_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏
@bot.message_handler(commands=['search'])
def search_books_start(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, search_books)


def search_books(message):
    query = message.text.strip().lower()
    cursor.execute('''
        SELECT id, title, author, source_link, tags FROM books 
        WHERE LOWER(title) LIKE ? OR tags LIKE ?
    ''', (f"%{query}%", f"%{query}%"))
    books = cursor.fetchall()

    if not books:
        bot.send_message(message.chat.id, "–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        response = "*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
        for book in books:
            book_id, title, author, link, tags = book
            tag_list = ", ".join([f"`{tag.strip()}`" for tag in tags.split(',')]) if tags else ""
            response += f"ID: {book_id} | {title} ({author})\n–°—Å—ã–ª–∫–∞: _{link}_\n–¢–µ–≥–∏: {tag_list}\n\n"
        bot.send_message(message.chat.id, response, parse_mode="Markdown")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(non_stop=True)